--assignment 5
--1
select * from books123
begin
update books123 set cost =cost + 10 where cost <500;
DBMS_OUTPUT.PUT_LINE('NO OF ROWS UPDATED : '|| SQL%ROWCOUNT);
END;

--2
begin
update member_copy set max_books_allowed = max_books_allowed + 2 where member_id = 5;
if sql%found then
DBMS_OUTPUT.PUT_LINE('UPDATE SUCCESSFUL ...');
ELSE
DBMS_OUTPUT.PUT_LINE('UPDATE NOT SUCCESSFUL ...');
END IF;
END;

--3
DECLARE
CURSOR CC1 IS SELECT * FROM MEMBER;
REC_MEM MEMBER%ROWTYPE;

BEGIN
OPEN CC1;
LOOP 
FETCH CC1 INTO REC_MEM;
EXIT WHEN CC1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('MEMBER ID :  '||REC_MEM.MEMBER_ID||'    MEMBER_NAME : ' || REC_MEM.MEMBER_NAME);
END LOOP;
CLOSE CC1;
END;



--4
CREATE TABLE MEMBER12_COPY AS SELECT * FROM MEMBER


DECLARE
CURSOR CC2 IS SELECT * FROM ISSUE;
ISS_REC ISSUE%ROWTYPE;
MBA MEMBER12_COPY.MAX_BOOKS_ALLOWED%TYPE;

BEGIN

OPEN CC2;
LOOP
FETCH CC2 INTO ISS_REC;
EXIT WHEN CC2%NOTFOUND;

SELECT MAX_BOOKS_ALLOWED INTO MBA FROM MEMBER12_COPY WHERE MEMBER_ID = ISS_REC.MEMBER_ID;

IF MBA > 0 THEN
UPDATE MEMBER12_COPY SET MAX_BOOKS_ALLOWED = MAX_BOOKS_ALLOWED -1 WHERE MEMBER_ID = ISS_REC.MEMBER_ID;
IF SQL%FOUND THEN 
  DBMS_OUTPUT.PUT_LINE('UPDATE SUCCESSFUL FOR MEMBER ID' ||ISS_REC.MEMBER_ID);
ELSE
DBMS_OUTPUT.PUT_LINE('UPDATE  NOT  SUCCESSFUL FOR MEMBER ID' || ISS_REC.MEMBER_ID);
END IF;
ELSE;
DBMS_OUTPUT.PUT_LINE('UPDATE IS NOT SUCCESSFUL FOR MEMBER ID '|| ISS_REC.MEMBER_ID||' BECAUSE MAX BOOKS_ALLOWED IS LESS FOR OR EQUAL TO 0' );
END IF;
END LOOP;
CLOSE CC2;
END;




