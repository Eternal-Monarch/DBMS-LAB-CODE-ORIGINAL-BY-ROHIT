--1
DECLARE
 X NUMBER(5);
 Y NUMBER(5);
 BEGIN
X:=:X;
Y:=:Y;
IF X>Y THEN
DBMS_OUTPUT.PUT_LINE( X || ' IS LARGER THAN '||Y);
ELSE
DBMS_OUTPUT.PUT_LINE(Y || 'IS LARGER THAN '||X);
END IF ;
END;

--2
DECLARE
   X NUMBER(5);
   
BEGIN 
   X := :X;
   IF MOD(X,2) = 0 THEN
       DBMS_OUTPUT.PUT_LINE(X || ' IS A EVEN NUMBER ');
   ELSE
      DBMS_OUTPUT.PUT_LINE(X || ' IS NOT A EVEN NUMBER ');
   END IF;
   END;

--3
DECLARE 
X NUMBER(5);
FACT NUMBER(10);
BEGIN
X:=5;
FACT :=1;
FOR COUNTER IN REVERSE 1..X

LOOP 
FACT:= FACT*COUNTER;
END LOOP;
DBMS_OUTPUT.PUT_LINE('FACTORIAL VALUE OF '||X||' IS '||FACT);
END;

--4
declare
YEAR NUMBER(5);
BEGIN
YEAR:=1500;
IF MOD(YEAR,100) = 0 THEN 
IF MOD (YEAR,4)=0 THEN
DBMS_OUTPUT.PUT_LINE(YEAR|| 'IS LEAP YEAR');
ELSE
DBMS_OUTPUT.PUT_LINE(YEAR|| 'IS NOT  LEAP YEAR');
END IF;
ELSE
IF MOD(YEAR,4) = 0 THEN
DBMS_OUTPUT.PUT_LINE( YEAR|| 'IS   LEAP YEAR');
ELSE
DBMS_OUTPUT.PUT_LINE( YEAR|| 'IS NOT  LEAP YEAR');
END IF;
END IF;
END;

--5
DECLARE
OLDSTR VARCHAR2(15);
NEWSTR VARCHAR2(15);
LEN NUMBER(5);

BEGIN
OLDSTR := 'SUPRATIV';
LEN := LENGTH(OLDSTR);
 
FOR COUNTER IN REVERSE 1.. LEN
LOOP 
NEWSTR := NEWSTR || SUBSTR(OLDSTR, COUNTER, 1);
END LOOP;
DBMS_OUTPUT.PUT_LINE('REVERSE STRING IS: '||NEWSTR);
END;
--6
create table CIRCLE (RADIUS NUMBER(3), AREA NUMBER(10,3))

DECLARE
RADIUS NUMBER(3);
AREA NUMBER(10,3);
BEGIN
RADIUS := 1;
WHILE RADIUS <= 10
LOOP
AREA := 3.14 * RADIUS * RADIUS;
INSERT INTO CIRCLE VALUES(RADIUS,AREA);
RADIUS := RADIUS+1;
END LOOP;
END;
SELECT * FROM CIRCLE;
--7
select * from books
create table books123 as select * from books
DECLARE
NEWCOST NUMBER(5);
OLDCOST NUMBER(5);
BNO NUMBER(5);
BEGIN
BNO := 106;
NEWCOST := 850;

SELECT COST INTO OLDCOST FROM books123 WHERE BOOK_NO = BNO;
IF OLDCOST < 450 THEN
IF NEWCOST < 900 THEN
UPDATE books123 SET COST = NEWCOST WHERE BOOK_NO = BNO;
dbms_output.Put_line('UPDATE SUCCESSFULLY DONE');
ELSE
dbms_output.Put_line('NEW COST VALUE IS GREATER THAN 900, SO
UPDATE NOT POSSIBLE');
END IF;
ELSE
dbms_output.Put_line('OLD COST VALUE IS GREATER THEN 450, SO
UPDATE NOT POSSIBLE');
END IF;
END;
select * from books123

--8

DECLARE
MID NUMBER(5);
BEGIN
MID:= 001;
FOR rec IN (SELECT MEMBER.MEMBER_ID,
MEMBER.MEMBER_NAME,
MEMBER.MEMBER_ADDRESS,
MEMBER.FEES_PAID
FROM MEMBER
WHERE MEMBER.MEMBER_ID = MID
)
LOOP

DBMS_OUTPUT.PUT_LINE ('MEMBER NUMBER' || rec.MEMBER_ID);
DBMS_OUTPUT.PUT_LINE ('---------------------------------------------------');
DBMS_OUTPUT.PUT_LINE ('MEMBER NAME: ' || rec.MEMBER_NAME);
DBMS_OUTPUT.PUT_LINE ('---------------------------------------------------');
DBMS_OUTPUT.PUT_LINE ('MEMBER ADDRESS: ' || rec.MEMBER_ADDRESS);
DBMS_OUTPUT.PUT_LINE ('----------------------------------------------------');
DBMS_OUTPUT.PUT_LINE ('FEES PAID: ' || rec.FEES_PAID);
END LOOP;
END;










--9
DECLARE
STR VARCHAR2(50);
SPCOUNT NUMBER(2);
LEN NUMBER(5);
STR2 VARCHAR2(50);
SUB VARCHAR2(2);
BEGIN
SPCOUNT := 0;
STR := ' bharti kumari ';
LEN := LENGTH(STR);
FOR COUNTER IN 1..LEN
LOOP
SUB := SUBSTR(STR, COUNTER, 1);
IF SUB = ' ' THEN
SPCOUNT := SPCOUNT + 1;
ELSE
STR2 := STR2 || SUBSTR(STR, COUNTER,
1);
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('STRING
WITHOUT SPACE = ' || STR2);
DBMS_OUTPUT.PUT_LINE('NUMBER OF
SPACE = ' || SPCOUNT);
END;








--10
DECLARE
STRING VARCHAR2(40);
WORD_COUNT NUMBER(5);
STRLEN NUMBER(5);
S VARCHAR2(40);
BEGIN
STRING:= :ENTER_A_STRING;
STRLEN:= LENGTH(STRING);
FOR I IN 1..STRLEN
LOOP
S:= SUBSTR(STRING,I,1);
DBMS_OUTPUT.PUT_LINE(S);
END LOOP;
END;
--11
create table MEMBER_COPY as select * from MEMBER
DECLARE
MID NUMBER(5);
NAME VARCHAR2(30);
BEGIN
MID := 004;
SELECT MEMBER_NAME INTO NAME FROM
MEMBER_COPY WHERE MEMBER_ID = MID;
DBMS_OUTPUT.PUT_LINE(UPPER(NAME));
DBMS_OUTPUT.PUT_LINE(LOWER(NAME));
END;
select * from MEMBER_COPY

